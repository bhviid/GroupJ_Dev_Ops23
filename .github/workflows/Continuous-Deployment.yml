---
name: Continuous-Deployment

on:
  
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
      - master
      
  # allow manual triggers for now too
  workflow_dispatch:
  #  manual: true

env:
  connection_string: ${{ secrets.POSTGRES_CONNECTION_STRING }}
  CONTAINER_NAME: minitwit
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/devops
  DOCKERFILE_NAME: MiniTwitPostgres.Dockerfile
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  unit-test:
    name: üß™ Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: dotnet Restore
        run: dotnet restore

      - name: dotnet Build
        run: dotnet build --configuration Release

      - name: Dotnet Test
        run: dotnet test Server.Test/Server.Test.csproj
  
  e2e-test:
    name: üîö Run E2E Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x

      - name: dotnet Restore
        run: dotnet restore

      - name: dotnet Build
        run: dotnet build --configuration Release

      - name: Dotnet Test
        run: dotnet test Server.Test/Server.Test.csproj

  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      Server: ${{ steps.filter.outputs.Server }}
      Simulation: ${{ steps.filter.outputs.Simulation }}
    steps:
    - uses: actions/checkout@v3
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ github.base_ref }}
        filters: |
          Server:
            - 'Server/**'
            - 'Client/**'
            - 'Shared/**'
          Simulation:
            - 'SlimTwit/**'
            - 'Shared/**'

  build-MiniTwit:
    name: üê≥ Build and push Docker images
    needs: [unit-test, e2e-test,changes]
    if: ${{ needs.changes.outputs.Server == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: üêã Build and push MiniTwit
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Docker/Dockerfiles/MiniTwitPostgres.Dockerfile
          push: true
          tags: bhviid/devops:latest
          cache-from: type=registry,ref=bhviid/devops:webbuildcache
          cache-to: type=registry,ref=bhviid/devops:webbuildcache,mode=max



  build-simulation:
    name: üê≥ Build and push Docker images
    needs: [unit-test, e2e-test,changes]
    if: ${{ needs.changes.outputs.Simulation == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2


      - name: üêã Build and push Minitwit-simulation
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Docker/Dockerfiles/SlimTwit.Dockerfile
          push: true
          tags: bhviid/slimtwit:latest
          cache-from: type=registry,ref=bhviid/slimtwit:webbuildcache
          cache-to: type=registry,ref=bhviid/slimtwit:webbuildcache,mode=max

  deploy-minitwit:
    name: ü§ò Deploy Minitwit to Production
    runs-on: ubuntu-latest
    needs: [build-MiniTwit]
    steps:
      - name: üöÄ Deploy MiniTwit to Production 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP_ADDRESS }}
          username: root
          key: ${{ secrets.SSH_PRIVAT_KEY }}
          script: |
            cd ~/docker/
            docker-compose pull
            docker-compose up -d

  deploy-simulation:
    name: ü§ò Deploy Simulation to Production
    runs-on: ubuntu-latest
    needs: [build-simulation]
    steps:
      - name: üöÄ Deploy Simulation to Production 
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP_ADDRESS_SIM }}
          username: root
          key: ${{ secrets.SSH_PRIVAT_KEY_SWARM }}
          script: |
            cd ~/
            docker service update -d --update-order start-first slimi_slimtwitter

