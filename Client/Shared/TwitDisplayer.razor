@inject HttpClient http

<ul class=messages>
    <Virtualize ItemsProvider="@Provider" Context="msgAuthor">
        <ItemContent>
            <li>
                <img src=@msgAuthor.Author.gravatar>
                <p>
                    <strong>
                        <a href="@msgAuthor.Author.username">@msgAuthor.Author.username</a>
                    </strong>
                    @msgAuthor.Msg.Text
                    <small>&mdash; @msgAuthor.Msg.PubDate?.ToString("yyyy MM dd @ HH:mm",
                        DateTimeFormatInfo.InvariantInfo)
                    </small>
                </p>
            </li>
        </ItemContent>
        <Placeholder>
            <li><em>There's no message so far.</em></li>
        </Placeholder>
    </Virtualize>
</ul>

@code
{
    public List<MsgDataPair> TwitData { get; set; } = new();

    [Parameter]
    public Func<int, int, Task<List<MsgDataPair>>> Fetcher { get; set; }

    [Parameter]
    public bool ReFetch { get; set; }

    private bool _thereIsMore = true;

    private int _pageSize = 12;
    private int _startIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        DataChange(await Fetcher(_startIndex, _pageSize));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && ReFetch)
        {
            var newData = await Fetcher(_startIndex, _pageSize);
            DataChange(newData);
        }
    }

    protected async Task handleNext()
    {
        _startIndex += _pageSize;
        var data = await Fetcher(_startIndex, _pageSize);
        DataChange(data);
    }

    private void DataChange(List<MsgDataPair> newData)
    {
        //Naive approach
        // TODO: Virtualization later
        TwitData.AddRange(newData);
        if (newData.Count < _pageSize)
        {
            _thereIsMore = false;
        }
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<MsgDataPair>> Provider(ItemsProviderRequest req)
    {
        var totelNum = await http.GetFromJsonAsync<int>("/minitwit/count");

        var numItems = Math.Min(req.Count, totelNum - req.StartIndex);
        var data = await Fetcher(req.StartIndex, numItems);


        return new ItemsProviderResult<MsgDataPair>(data, totelNum);
    }
}