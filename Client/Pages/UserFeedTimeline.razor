@page "/"
@inject HttpClient http
@inject NavigationManager navigation
@inject UserService uService
@inject SpinnerService ss

<h2>Your feed üêÖ</h2>
@if (uService.ActiveUser is not null)
{
    <div class=twitbox>
    <h3>What's on your mind @uService.ActiveUser.Username?</h3>
    <WrappingSpinner>
        @if (_hasSent)
            {
                <div class="alert alert-success mb-0" role="alert">
                    You succesfully shared a Twit! üêß
                </div>
            }
            else
            {
                <EditForm Model="@thisModel" OnSubmit="@HandleSubmit">
                    <p>
                        <input type=text name=text size=60 @bind-value="thisModel.WhatsOnYourMindString">

                        <input type=submit value="Share">
                    </p>
                </EditForm>
            }
        </WrappingSpinner>
    </div>
}
<TwitDisplayer TwitData="TwitData" />

@code
{
    public User? User { get; set; }

    public List<MsgDataPair> TwitData { get; set; } = new List<MsgDataPair>();
    private MessageSubmitModel thisModel = new();

    private bool _hasSent;

    private async void HandleSubmit()
    {
        if (User is null) return;

        var toPost = new MessageCreateDTO(User.Username, thisModel.WhatsOnYourMindString);

        ss.Show();

        var resp = await http.PostAsJsonAsync<MessageCreateDTO>($"/minitwit/add-message", toPost);

        if (resp.IsSuccessStatusCode)
        {
            await GetTwitData();
            thisModel.Reset();
            ss.Hide();
            _hasSent = true;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(2));
            _hasSent = false;
            StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (uService.ActiveUser is not null)
        {
            User = uService.ActiveUser;
            await GetTwitData();
        }
        else
        {
            navigation.NavigateTo("/public");
            return;
        }
    }

    private async Task GetTwitData()
    {
        ss.Show();
        MsgDataPair[] res =
        await http.GetFromJsonAsync<MsgDataPair[]>($"/minitwit/feed/{User.Username}") ?? Array.Empty<MsgDataPair>();

        TwitData = res!.ToList();
        ss.Hide();
    }
}