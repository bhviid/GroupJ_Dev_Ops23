@page "/"
@inject HttpClient http
@inject NavigationManager navigation
@inject UserService uService
@inject SpinnerService ss

<h2>Your feed üêÖ</h2>
@if (uService.ActiveUser is not null)
{
    <div class=twitbox>
    <h3>What's on your mind @uService.ActiveUser.Username?</h3>
    <WrappingSpinner>
        @if (_hasSent)
            {
                <div class="alert alert-success mb-0" role="alert">
                    You succesfully shared a Twit! üêß
                </div>
            }
            else
            {
                <EditForm Model="@thisModel" OnSubmit="@HandleSubmit">
                    <p>
                        <input type=text name=text size=60 @bind-value="thisModel.WhatsOnYourMindString">

                        <input type=submit value="Share">
                    </p>
                </EditForm>
            }
        </WrappingSpinner>
    </div>
}
<TwitDisplayer Fetcher="@GetTwitData" />

@code
{
    public User? User { get; set; }

    private MessageSubmitModel thisModel = new();

    private bool _hasSent;

    private async void HandleSubmit()
    {
        if (User is null) return;

        var toPost = new MessageCreateDTO(User.Username, thisModel.WhatsOnYourMindString);

        ss.Show();

        var resp = await http.PostAsJsonAsync<MessageCreateDTO>($"/minitwit/add-message", toPost);

        if (resp.IsSuccessStatusCode)
        {
            thisModel.Reset();
            ss.Hide();
            _hasSent = true;
            StateHasChanged();
            await Task.Delay(TimeSpan.FromSeconds(2));
            _hasSent = false;
            StateHasChanged();
        }
    }
    protected override void OnInitialized()
    {
        if (uService.ActiveUser is not null)
        {
            User = uService.ActiveUser;
        }
        else
        {
            navigation.NavigateTo("/public");
            return;
        }
    }

    public async Task<List<MsgDataPair>> GetTwitData(int startIndex, int pageSize)
    {
        if (User is null) return Array.Empty<MsgDataPair>().ToList();
        var tmp = await
        http.GetFromJsonAsync<MsgDataPair[]>($"/minitwit/feed/{User.Username}?startIndex={startIndex}&pageSize={pageSize}")
        ?? Array.Empty<MsgDataPair>();
        return tmp.ToList();
    }
}