@page "/register"
@inject HttpClient http
@inject NavigationManager navigation
@inject UserService uService
<PageTitle>Sign Up</PageTitle>

<h2>Sign Up</h2>

@if (errorArr is not null)
{
    <div class="error">
    @if (errorArr!.Length > 1)
        {
            for (int i = 1; i < errorArr!.Length; i++)
            {
                <label>@errorArr[i]</label> <br />
            }
        }
    </div>
}



<EditForm Model="@registerModel" OnSubmit="@SignUp">
    Username:<br>

    &emsp;&emsp;&emsp;
    <InputText @bind-Value="@registerModel.Username" /> <br>

    E-Mail:<br>

    &emsp;&emsp;&emsp;
    <InputText @bind-Value="@registerModel.Email" /> <br>

    Password:<br>

    &emsp;&emsp;&emsp;
    <InputText @bind-Value="@registerModel.Password" /> <br>

    Password (repeat):<br>

    &emsp;&emsp;&emsp;
    <InputText @bind-Value="@registerModel.PasswordRepeat" /> <br>

    <button type="submit">Sign Up</button>
</EditForm>

@code {
    private string[]? errorArr = null;
    private RegisterModel registerModel = new();

    private async void SignUp()
    {
        var content = Utility_Methods.stringify_object(new UserCreateDTO(
        registerModel.Username,
        registerModel.Email,
        registerModel.Password,
        registerModel.PasswordRepeat)
        );
        var resp = await http.PostAsync("minitwit/register", content);
        if (resp.IsSuccessStatusCode)
        {
            uService.ActiveUser = await resp.Content.ReadFromJsonAsync<User>();
            navigation.NavigateTo("/");
        }
        else
        {
            var errorString = await resp.Content.ReadAsStringAsync();
            var errSplit = errorString.Split("\"errors\":");
            if (errSplit.Length > 1)
            {
                var errors = errSplit[1];
                errorArr = errors.Split("[");
                if (errorArr.Length > 1)
                {
                    // we omit the first element due to weird split
                    for (int i = 1; i < errorArr.Length; i++)
                    {
                        errorArr[i] = errorArr[i].TrimStart('"').Split("\"")[0];
                    }
                }
            }
            else
            {
                errorArr = new string[2];
                errorArr[1] = errorString;
            }
            StateHasChanged();
        }
    }
}

